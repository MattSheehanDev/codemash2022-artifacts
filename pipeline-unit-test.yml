trigger:
  branches:
    include:
      - master
  paths:
    include:
      - pipeline-unit-test.yml

resources:
  repositories:
    - repository: DotnetSamples       # Name used during the checkout step
      type: Github
      endpoint: MattSheehanDev        # Service Connection name
      name: dotnet/samples

pool:
  # Equivalent of Windows Server 2019 with Visual Studio 2019
  vmImage: windows-latest

stages:
  - stage: TestNumbersStage
    displayName: Test Dotnet Sample (Numbers)
    jobs:
      - job: TestNumbers
        steps:
          - checkout: DotnetSamples
          - task: DotNetCoreCLI@2
            displayName: Build Tests
            inputs:
              command: 'build'
              projects: 'csharp/unit-testing-code-coverage/XUnit.Coverlet.Collector/XUnit.Coverlet.Collector.csproj'
          - task: DotNetCoreCLI@2
            displayName: Test Numbers
            inputs:
              command: 'test'
              projects: 'csharp/unit-testing-code-coverage/XUnit.Coverlet.Collector/XUnit.Coverlet.Collector.csproj'
              arguments: '--no-restore --no-build --collect:"XPlat Code Coverage" --logger trx --results-directory $(Agent.TempDirectory)'
              # If publishTestResults is true, test results are published back to Azure Devops (same as the PublishTestResults task below)
              publishTestResults: false
          - task: PublishTestResults@2
            displayName: Publish Test Results
            inputs:
              testResultsFormat: 'VSTest'
              testResultsFiles: '$(Agent.TempDirectory)/**/*.trx'
              testRunTitle: Numbers Unit Tests
            # This will run the ReportGenerator to convert the code coverage xml to html
          - task: PublishCodeCoverageResults@1
            displayName: Publish Code Coverage Results
            inputs:
              codeCoverageTool: Cobertura
              summaryFileLocation: '$(Agent.TempDirectory)/**/coverage.cobertura.xml'
